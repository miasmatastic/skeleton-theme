{% doc %}
  Renders a carousel component for resource lists.

  @param {object} items - Collection of items to display in carousel
  @param {string} [item_type] - Type of items (products, articles, collections)
  @param {boolean} [show_arrows] - Whether to show navigation arrows
  @param {boolean} [show_dots] - Whether to show pagination dots

  @example
  {% render 'resource-list-carousel', items: collections.featured.products %}
  {% render 'resource-list-carousel', items: blog.articles, item_type: 'articles' %}
{% enddoc %}

{%- liquid
  assign item_type = item_type | default: 'products'
  assign show_arrows = show_arrows | default: true
  assign show_dots = show_dots | default: true
  assign item_count = items.size
  assign carousel_id = 'carousel-' | append: 'default'
-%}

{%- if item_count > 0 -%}
  <div class="resource-carousel" id="{{ carousel_id }}" data-item-count="{{ item_count }}">
    {%- if show_arrows -%}
      <button class="resource-carousel__arrow resource-carousel__arrow--prev" aria-label="Previous items">
        <svg viewBox="0 0 24 24" fill="currentColor" width="20" height="20">
          <path d="M15.41,16.58L10.83,12L15.41,7.41L14,6L8,12L14,18L15.41,16.58Z"/>
        </svg>
      </button>
    {%- endif -%}
    
    <div class="resource-carousel__track-container">
      <div class="resource-carousel__track" data-carousel-track>
        {%- for item in items -%}
          <div class="resource-carousel__slide" data-slide-index="{{ forloop.index0 }}">
            {%- case item_type -%}
              {%- when 'products' -%}
                {% render 'card-product-dynamic', product_card_product: item, show_quick_add: false %}
              {%- when 'articles' -%}
                <article class="carousel-article">
                  {%- if item.image -%}
                    <a href="{{ item.url }}" class="carousel-article__image">
                      {% render 'image', image: item.image, width: 400, height: 300, crop: 'center' %}
                    </a>
                  {%- endif -%}
                  <div class="carousel-article__content">
                    <h3 class="carousel-article__title">
                      <a href="{{ item.url }}">{{ item.title | escape }}</a>
                    </h3>
                    {%- if item.excerpt -%}
                      <p class="carousel-article__excerpt">
                        {{ item.excerpt | strip_html | truncatewords: 15 }}
                      </p>
                    {%- endif -%}
                    <time class="carousel-article__date">
                      {{ item.published_at | date: '%B %d, %Y' }}
                    </time>
                  </div>
                </article>
              {%- when 'collections' -%}
                <div class="carousel-collection">
                  {%- if item.featured_image -%}
                    <a href="{{ item.url }}" class="carousel-collection__image">
                      {% render 'image', image: item.featured_image, width: 400, height: 300, crop: 'center' %}
                    </a>
                  {%- endif -%}
                  <div class="carousel-collection__content">
                    <h3 class="carousel-collection__title">
                      <a href="{{ item.url }}">{{ item.title | escape }}</a>
                    </h3>
                    {%- if item.description -%}
                      <p class="carousel-collection__description">
                        {{ item.description | strip_html | truncatewords: 12 }}
                      </p>
                    {%- endif -%}
                    <span class="carousel-collection__count">
                      {{ item.products_count }} items
                    </span>
                  </div>
                </div>
            {%- endcase -%}
          </div>
        {%- endfor -%}
      </div>
    </div>
    
    {%- if show_arrows -%}
      <button class="resource-carousel__arrow resource-carousel__arrow--next" aria-label="Next items">
        <svg viewBox="0 0 24 24" fill="currentColor" width="20" height="20">
          <path d="M8.59,16.58L13.17,12L8.59,7.41L10,6L16,12L10,18L8.59,16.58Z"/>
        </svg>
      </button>
    {%- endif -%}
    
    {%- if show_dots and item_count > 1 -%}
      <div class="resource-carousel__dots" role="tablist">
        {%- for item in items -%}
          <button class="resource-carousel__dot" 
                  data-slide-to="{{ forloop.index0 }}"
                  role="tab"
                  aria-label="Go to slide {{ forloop.index }}"
                  {%- if forloop.first %} aria-selected="true"{% endif %}>
          </button>
        {%- endfor -%}
      </div>
    {%- endif -%}
  </div>
{%- endif -%}

{% javascript %}
  class ResourceCarousel {
    constructor(element) {
      this.carousel = element;
      this.track = element.querySelector('[data-carousel-track]');
      this.slides = Array.from(this.track.children);
      this.prevButton = element.querySelector('.resource-carousel__arrow--prev');
      this.nextButton = element.querySelector('.resource-carousel__arrow--next');
      this.dots = Array.from(element.querySelectorAll('.resource-carousel__dot'));
      
      this.currentSlide = 0;
      this.slideWidth = this.slides[0]?.offsetWidth || 0;
      this.visibleSlides = this.getVisibleSlides();
      
      this.init();
    }
    
    init() {
      this.updateCarousel();
      this.bindEvents();
      window.addEventListener('resize', () => this.handleResize());
    }
    
    bindEvents() {
      if (this.prevButton) {
        this.prevButton.addEventListener('click', () => this.prevSlide());
      }
      
      if (this.nextButton) {
        this.nextButton.addEventListener('click', () => this.nextSlide());
      }
      
      this.dots.forEach((dot, index) => {
        dot.addEventListener('click', () => this.goToSlide(index));
      });
      
      // Touch/swipe support
      let startX = 0;
      let isDragging = false;
      
      this.track.addEventListener('touchstart', (e) => {
        startX = e.touches[0].clientX;
        isDragging = true;
      });
      
      this.track.addEventListener('touchend', (e) => {
        if (!isDragging) return;
        
        const endX = e.changedTouches[0].clientX;
        const diff = startX - endX;
        
        if (Math.abs(diff) > 50) {
          if (diff > 0) {
            this.nextSlide();
          } else {
            this.prevSlide();
          }
        }
        
        isDragging = false;
      });
    }
    
    getVisibleSlides() {
      const containerWidth = this.carousel.offsetWidth;
      return Math.floor(containerWidth / (this.slideWidth + 20)); // 20px for gap
    }
    
    updateCarousel() {
      const translateX = -this.currentSlide * (this.slideWidth + 20);
      this.track.style.transform = `translateX(${translateX}px)`;
      
      // Update dots
      this.dots.forEach((dot, index) => {
        dot.setAttribute('aria-selected', index === this.currentSlide ? 'true' : 'false');
        dot.classList.toggle('active', index === this.currentSlide);
      });
      
      // Update arrow states
      if (this.prevButton) {
        this.prevButton.disabled = this.currentSlide === 0;
      }
      
      if (this.nextButton) {
        const maxSlide = Math.max(0, this.slides.length - this.visibleSlides);
        this.nextButton.disabled = this.currentSlide >= maxSlide;
      }
    }
    
    prevSlide() {
      if (this.currentSlide > 0) {
        this.currentSlide--;
        this.updateCarousel();
      }
    }
    
    nextSlide() {
      const maxSlide = Math.max(0, this.slides.length - this.visibleSlides);
      if (this.currentSlide < maxSlide) {
        this.currentSlide++;
        this.updateCarousel();
      }
    }
    
    goToSlide(index) {
      const maxSlide = Math.max(0, this.slides.length - this.visibleSlides);
      this.currentSlide = Math.min(index, maxSlide);
      this.updateCarousel();
    }
    
    handleResize() {
      this.slideWidth = this.slides[0]?.offsetWidth || 0;
      this.visibleSlides = this.getVisibleSlides();
      this.updateCarousel();
    }
  }
  
  // Initialize carousels
  document.addEventListener('DOMContentLoaded', () => {
    const carousels = document.querySelectorAll('.resource-carousel');
    carousels.forEach(carousel => new ResourceCarousel(carousel));
  });
{% endjavascript %}

{% stylesheet %}
  .resource-carousel {
    position: relative;
    margin: 0 auto;
  }

  .resource-carousel__track-container {
    overflow: hidden;
    position: relative;
  }

  .resource-carousel__track {
    display: flex;
    gap: 1.25rem;
    transition: transform 0.3s ease;
  }

  .resource-carousel__slide {
    flex: 0 0 auto;
    width: 280px;
  }

  .resource-carousel__arrow {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    z-index: 2;
    background: rgba(255, 255, 255, 0.9);
    border: 1px solid rgba(0, 0, 0, 0.1);
    border-radius: 50%;
    width: 44px;
    height: 44px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.2s ease;
    backdrop-filter: blur(4px);
  }

  .resource-carousel__arrow:hover {
    background: rgba(255, 255, 255, 1);
    transform: translateY(-50%) scale(1.05);
  }

  .resource-carousel__arrow:disabled {
    opacity: 0.3;
    cursor: not-allowed;
  }

  .resource-carousel__arrow--prev {
    left: -22px;
  }

  .resource-carousel__arrow--next {
    right: -22px;
  }

  .resource-carousel__dots {
    display: flex;
    justify-content: center;
    gap: 0.5rem;
    margin-top: 1.5rem;
  }

  .resource-carousel__dot {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    border: none;
    background: rgba(var(--color-foreground), 0.3);
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .resource-carousel__dot.active,
  .resource-carousel__dot[aria-selected="true"] {
    background: var(--color-foreground);
    transform: scale(1.25);
  }

  /* Carousel item styles */
  .carousel-article,
  .carousel-collection {
    background: rgba(var(--color-foreground), 0.02);
    border-radius: 8px;
    overflow: hidden;
    height: 100%;
    display: flex;
    flex-direction: column;
  }

  .carousel-article__image,
  .carousel-collection__image {
    display: block;
    aspect-ratio: 4/3;
  }

  .carousel-article__image img,
  .carousel-collection__image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .carousel-article__content,
  .carousel-collection__content {
    padding: 1rem;
    flex: 1;
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .carousel-article__title,
  .carousel-collection__title {
    font-size: 1rem;
    font-weight: 600;
    margin: 0;
    line-height: 1.3;
  }

  .carousel-article__title a,
  .carousel-collection__title a {
    color: inherit;
    text-decoration: none;
  }

  .carousel-article__excerpt,
  .carousel-collection__description {
    font-size: 0.875rem;
    line-height: 1.4;
    opacity: 0.8;
    margin: 0;
    flex: 1;
  }

  .carousel-article__date,
  .carousel-collection__count {
    font-size: 0.75rem;
    opacity: 0.7;
    margin-top: auto;
  }

  @media (max-width: 768px) {
    .resource-carousel__slide {
      width: 240px;
    }
    
    .resource-carousel__arrow--prev {
      left: -15px;
    }
    
    .resource-carousel__arrow--next {
      right: -15px;
    }
  }

  @media (max-width: 480px) {
    .resource-carousel__slide {
      width: 200px;
    }
    
    .resource-carousel__arrow {
      width: 36px;
      height: 36px;
    }
    
    .resource-carousel__arrow--prev {
      left: -10px;
    }
    
    .resource-carousel__arrow--next {
      right: -10px;
    }
  }
{% endstylesheet %}